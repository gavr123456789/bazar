union Value = 
| Ast function: FunctionT arguments: List::Value
| BoolT v: Boolean
| IntegerT v: Int
| ListT v: MutableList::Value
| NullT
| StringT v: String
| Variable name: String v: Value

mut Variable assign::Value = [
  "assign `$assign` to `$this`" echo
  v <- assign
  "assign complete, `$this`" echo
]
// NewVariable returns the Variable corresponding to name, creating it if it doesn't exist.
constructor Variable 
  withName: name::String 
  variablesMap::MutableMap(String, Variable) -> Variable = [
  // If the variable already exists, then return it.
  result = variablesMap containsKey: name |>
    ifTrue: [
      variablesMap at: name |> unpackOrPANIC
    ] ifFalse: [
      // The variable doesn't exist. Create it, add it to variablesMap, then return it.
      newVar = Variable name: name v: NullT new
      variablesMap at: name put: newVar
      newVar
    ]
  
  ^ result
]

constructor Ast newFunction::FunctionT args::List::Value -> Ast! = [
  argsCount = args count
  newFunction arity != argsCount ifTrue: [
    Error throwWithMessage: "function arity mismatch: expected"
  ]
  ^ Ast function: newFunction arguments: args
]

extend Value [
  on execute -> Value = [
    value = | this
    // Run executes the ast by passing its arguments to its function.
    | Ast => .function fn List: .arguments

    // Run simply returns the boolean unchanged.
    | BoolT => this
    
    // Run simply returns the integer unchanged.
    | IntegerT => this
    
    // Run simply returns the list unchanged.
    | ListT => this

    // Run simply returns the null unchanged.
    | NullT => this
      
    // Run simply returns the String unchanged.
    | StringT => this

    // Run looks up the last-assigned value for the variable, returning an error if the variable hasn't
    // been assigned yet.
    | Variable => .v
    
    ^ value
  ]
  on dump = [
    .echo
    ^ .
  ]

  on toBooleanT -> BoolT! = [
    result::Boolean = | this
    | Ast => Error throwWithMessage: "Ast doesn't define boolean conversions"
    // ToBoolean simply returns the boolean unchanged.
    | BoolT     => .v
    | IntegerT  => .v != 0
    | ListT     => .v count != 0
    | NullT     => false
    | StringT   => .v != ""
    | Variable  => Error throwWithMessage: "Variable doesn't define boolean conversions"

    ^ BoolT v: result
  ]

  on toIntegerT -> IntegerT! = [
    result = | this
    | BoolT => .v ifTrue: [1] ifFalse: [0]
    | IntegerT => .v
    | NullT => 0
    | Variable => TO DO: "sas"
    | Ast => Error throwWithMessage: "Ast $this toInteger impossible"
    | ListT => Error throwWithMessage: "List $this toInteger impossible"
    | StringT => Error throwWithMessage: "String $this toInteger impposible"

    ^ IntegerT v: result
  ]
  on toStringT -> StringT = [
    result = | this
    | StringT => .v
    | IntegerT => .v toString
    | BoolT => .v ifTrue: ["true"] ifFalse: ["false"]
    | ListT => .v joinWith: "\n" transform: [it toStringT v]
    | NullT => "NULL"
    | Variable => TO DO: "Variable doesn't define string conversions"
    | Ast => TO DO: "Ast doesn't define string conversions"
  
    ^ StringT v: result
  ]
  on toListT -> ListT = [
    // TODO
    ^ TO DO: "value"
  ]
  on compare: rhs::Value funcName::String -> Int! = 
  | this
  | IntegerT => .v - rhs toIntegerT v
  | BoolT => [
    v2 = rhs toBooleanT v
    .v not && v2 => -1 |=>
    .v && v2 not => 1  |=>
    0
  ]
  | ListT => .compare: rhs toListT funcName: funcName
  |=> TO DO: "invalid type given to $funcName, comparable types are: Int, List, Boolean"
]

ListT compare: list::ListT funcName::String -> Int! = [
  len = v count 
  v2 = list toListT v

  len repeat: [
    cmp = (v at: it) compare: (v2 at: it) funcName: funcName
    cmp != 0 => ^cmp
  ]

  ^ v count - list v count
]

constructor ListT new = [
  empty::MutableList::Value = {}
  ^ ListT v: empty
]

// set protocol for every definition below
Project protocol: "helpers"

extend Value [
  on runToInteger = .execute toIntegerT
  on runToBoolean = .execute toBooleanT
  on runToString = .execute toStringT
  on runToList = .execute toListT
]

