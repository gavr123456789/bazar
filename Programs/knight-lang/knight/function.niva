type FunctionT 
  name: String 
  arity: Int 
  fn: [List::Value -> Value]

constructor FunctionT knownFunctions = [  

  nullF = FunctionT 
    name: "NULL" 
    arity: 0 
    fn: [ NullT new ]

  atF = FunctionT 
    name: "@" 
    arity: 0 
    fn: [ ListT new ]

  promptF = FunctionT 
    name: "PROMPT" 
    arity: 0 
    fn: [ TO DO: "func prompt(_ []Value) (Value, error) {" ]
  
  randomF = FunctionT 
    name: "RANDOM" 
    arity: 0 
    fn: [ IntegerT v: (0..99999 |> random) ]
  
  // arity 1
  noopF = FunctionT 
    name: ":" 
    arity: 1
    fn: [ args -> args at: 0 |> execute ]
  
  // block returns its argument unevaluated. This is intended to be used in conjunction with call (see
  // below) to defer evaluation to a later point in time.
  blockF = FunctionT 
    name: "BLOCK" 
    arity: 1
    fn: [ args -> args at: 0 ]

  
  trueF = FunctionT 
    name: "TRUE" 
    arity: 0 
    fn: [ BoolT v: true ]

  falseF = FunctionT 
    name: "FALSE" 
    arity: 0 
    fn: [ BoolT v: false ]
  // call runs its argument, and then returns the result of running _that_ value. This allows us to
  // defer execution of `BLOCK`s until later on.    
  callF = FunctionT 
    name: "CALL" 
    arity: 1
    fn: [ args -> 
      block = args at: 0 |> execute
      block execute 
    ]
  // quit exits the program with the given exit status code.
  quitF = FunctionT 
    name: "QUIT" 
    arity: 1
    fn: [ args -> 
      status = args at: 0 |> runToInteger |> v
      TO DO: "exit status: $status"
    ]
  // not returns the logical negation of its argument
  notF = FunctionT 
    name: "!" 
    arity: 1
    fn: [ args -> 
      BoolT v: (args at: 0 |> runToBoolean |> v not)
    ]

  negateF = FunctionT 
    name: "~" 
    arity: 1
    fn: [ args -> 
      IntegerT 
        v: (args at: 0 |> runToInteger |> v |> + 1 )
    ]
  
  lengthF = FunctionT 
    name: "LENGTH" 
    arity: 1
    fn: [ args -> 
      container = args at: 0 |> execute

      | container
      | ListT => IntegerT v: container v count
      | StringT => IntegerT v: container v count
      |=> [
        // Knight 2.0.1 required `LENGTH` to coerce its arguments to lists, instead of having it be
        // undefined behaviour
        list = container toListT
        IntegerT v: list v count
      ]
    ]
  
  dubpF = FunctionT 
    name: "DUMP" 
    arity: 1
    fn: [ args -> 
      args at: 0 |> execute |> dump
    ]
  boxF = FunctionT 
    name: "," 
    arity: 1
    fn: [ args -> 
      ListT v: {(args at: 0 |> execute)}
    ]
  headF = FunctionT 
    name: "[" 
    arity: 1
    fn: [ args -> 
      arg = args at: 0 |> execute
      | arg
      | ListT => [
        arg v count != 0 assertTrue: "empty list given to '['"
        arg v at: 0
      ]
      | StringT => [
        arg v count != 0 assertTrue: "empty list given to '['"
        StringT v: (arg v at: 0 |> toString)
      ]
      |=> TO DO: "invalid type given to ']': $arg"
    ]
  tailF = FunctionT 
    name: "]" 
    arity: 1
    fn: [ args -> 
      arg = args at: 0 |> execute
      | arg
      | ListT => [
        arg v count != 0 assertTrue: "empty list given to ']'"
        ListT v: (arg v viewFrom: 1 to: arg v count)
      ]
      | StringT => [
        arg v count != 0 assertTrue: "empty list given to ']'"
        StringT v: (arg v drop: 1)
      ]
      |=> TO DO: "invalid type given to '': $arg"
    ]
  // output writes its argument to stdout and returns null. Normally, a newline is added after its
  // argument, however if the argument ends in a `\`, the backslash is removed and no newline is
  // printed.
  outputF = FunctionT 
    name: "OUTPUT" 
    arity: 1
    fn: [ args -> 
      str = args at: 0 |> runToString v

      
      str isEmpty not && (str at: (str count - 1) |> == '\\')
        ifTrue: [
          str slice: 0..<(str count - 1) |> echo
        ] ifFalse: [
          str echo
        ]

      NullT new
    ]

  asciiF = FunctionT 
    name: "ASCII" 
    arity: 1
    fn: [ args -> 
      v = args at: 0 |> execute
      | v
      | IntegerT => StringT v: v v toChar toString
      | StringT => IntegerT v: v v toInt
      |=> TO DO: "invalid type given to 'ASCII': $v, only Integer and String is supported"
    ]

  // binary
  addF = FunctionT 
    name: "+" 
    arity: 2
    fn: [ args -> 
      lhs = args at: 0 |> execute

      | lhs
      | IntegerT => [
        rhs = args at: 1 |> runToInteger v
        IntegerT v: rhs + lhs v
      ]
      | StringT => [
        rhs = args at: 1 |> runToString v 
        StringT v: lhs v + rhs
      ]
      | ListT => [
        rhs = args at: 1 |> runToList v
        ListT v: (lhs v + rhs) toMutableList
      ]
      |=> TO DO: "invalid type given to '+': $lhs, only Integer, String, List is supported"
    ]

  substractF = FunctionT 
    name: "-" 
    arity: 2
    fn: [ args -> 
      lhs = args at: 0 |> execute
      | lhs
      | IntegerT => [
        rhs = args at: 1 |> runToInteger v
        IntegerT v: lhs v - rhs
      ]
    
      |=> TO DO: "invalid type given to '-': $lhs, only Integer is supported"
    ]
  // multiply an integer by another, or repeats a list or string. It returns an error for other types.
  multiplyF = FunctionT 
    name: "*" 
    arity: 2
    fn: [ args -> 
      lhs = args at: 0 |> execute
      rhs = args at: 1 |> runToInteger v

      | lhs
      | IntegerT => IntegerT v: lhs v * rhs
      | StringT => [
        rhs < 0 ifTrue: [TO DO: "negative replication amount for a string in '*': $rhs"]

        sb = StringBuilder new
        rhs repeat: [
          sb append: lhs v
        ]

        StringT v: sb toString 
      ]
      | ListT => [
        rhs < 0 ifTrue: [TO DO: "negative replication amount for a list in '*': $rhs"]

        list::MutableList::Value = {}
         
        rhs repeat: [
          list addAll: lhs v
        ]

        ListT v: list 
      ]
    
      |=> TO DO: "invalid type given to '/': $rhs, only Integer, String, List is supported"
    ]
  divideF = FunctionT 
    name: "/" 
    arity: 2
    fn: [ args -> 
      lhs = args at: 0 |> execute
      | lhs
      | IntegerT => [
        rhs = args at: 1 |> runToInteger v
        IntegerT v: lhs v / rhs
      ]
    
      |=> TO DO: "invalid type given to '/': $lhs, only Integer is supported"
    ]

  // remainder gets the remainder of the first argument and the second. It returns an error for other
  // types, or if the second argument is zero.
  remainderF = FunctionT 
    name: "%" 
    arity: 2
    fn: [ args -> 
      lhs = args at: 0 |> execute
      | lhs
      | IntegerT => [
        rhs = args at: 1 |> runToInteger v
        IntegerT v: lhs v % rhs
      ]
    
      |=> TO DO: "invalid type given to '/': $lhs, only Integer is supported"
    ]
  
  // TODO block
  lessThanF = FunctionT 
    name: "<" 
    arity: 2
    fn: [ args -> 
      lhs = args at: 0 |> execute
      rhs = args at: 1 |> execute
      BoolT v: (lhs compare: rhs funcName: "<") < 0
    ]
  greaterThanF = FunctionT 
    name: ">" 
    arity: 2
    fn: [ args -> 
      lhs = args at: 0 |> execute
      rhs = args at: 1 |> execute
      BoolT v: (lhs compare: rhs funcName: ">") > 0
    ]
  equalToF = FunctionT 
    name: "?"
    arity: 2
    fn: [ args -> 
      // TODO: not deep equal
      lhs = args at: 0 |> execute
      rhs = args at: 1 |> execute
      BoolT v: (lhs compare: rhs funcName: ">") == 0
    ]
  andF = FunctionT 
    name: ">" 
    arity: 2
    fn: [ args -> 
      lhs = args at: 0 |> execute
      isTruthy = lhs toBooleanT v
      isTruthy 
        ifTrue: [args at: 1 |> execute]
        ifFalse: [lhs]
    ]
  orF = FunctionT 
    name: ">" 
    arity: 2
    fn: [ args -> 
      lhs = args at: 0 |> execute
      isTruthy = lhs toBooleanT v
      isTruthy 
        ifFalse: [args at: 1 |> execute]
        ifTrue: [lhs]
    ]
  exponentiateF = FunctionT 
    name: "^" 
    arity: 2
    fn: [ args -> 
      lhs = args at: 0 |> runToInteger v
      rhs = args at: 1 |> runToInteger v
      mut c = lhs
      rhs repeat: [ c <- c * c ]
      IntegerT v: c
    ]
  
  thenF = FunctionT 
    name: ";"
    arity: 2
    fn: [ args -> 
      args at: 0 |> execute
      args at: 1 |> execute
    ]
  assignF = FunctionT 
    name: "="
    arity: 2
    fn: [ args -> 
      lhs = args at: 0
      rhs = args at: 1
      BoolT v: (lhs deepEqual: rhs)
    ]
  whileF = FunctionT 
    name: "WHILE"
    arity: 2
    fn: [ args -> 
      [args at: 0 |> runToBoolean] whileTrue: [
        args at: 1 |> execute // body
      ]
      NullT new
    ]


  // 3

  // if_ evaluates and returns the second argument if the first is truthy; if it's falsey, if_
  // evaluates and returns the third argument instead.
  ifF = FunctionT 
    name: "IF"
    arity: 3
    fn: [ args -> 
      args at: 0 |> runToBoolean v |> 
        ifTrue: [
          args at: 1 |> execute // then
        ] ifFalse: [
          args at: 2 |> execute // else
        ]
    ]

  getF = FunctionT 
    name: "IF"
    arity: 3
    fn: [ args -> 
      collection = args at: 0 |> execute
      // Get the starting index, returning an error if it's negative
      start = args at: 1 |> runToInteger v
      start < 0 ifTrue: [TO DO: "negative start given to 'GET': $start"]

      length = args at: 2 |> runToInteger v
      length < 0 ifTrue: [TO DO: "negative length given to 'GET': $length"]
      
      stop = start + length
      
      | collection
      | StringT => [
        low = collection v count
        high = stop
        low < high 
          ifTrue: [
            TO DO: "string index out of bounds for 'GET': $low < $high"
          ] ifFalse: [
            StringT v: (collection v substringFrom: start to: stop)
          ]
      ]
      | ListT => [
        low = collection v count
        high = stop
        low < high 
          ifTrue: [
            TO DO: "string index out of bounds for 'GET': $low < $high"
          ] ifFalse: [
            ListT v: (collection v viewFrom: start to: stop)
          ]
      ]
      |=> TO DO: "invalid type given to 'GET': $collection"
    ]
  
  
  result = #{
    'T' trueF
    'F' falseF
    'N' nullF
    '@' atF
    'P' promptF
    'R' randomF
    // Arity 1
    ':' noopF
    'B' blockF
    'C' callF
    'Q' quitF
    '!' notF
    'L' lengthF
    'D' dubpF
    'O' outputF
    'A' asciiF
    '~' negateF
    ',' negateF
    '[' headF
    ']' tailF
    // Arity 2
    '+' addF
    '-' substractF
    '*' multiplyF
    '/' divideF
    '%' remainderF
    '^' exponentiateF
    '<' lessThanF
    '>' greaterThanF
    '?' equalToF
    '&' andF
    '|' orF
    ';' thenF
    '=' assignF
    'W' whileF
    // Arity 3
    // 'I' ifF
    // 'G' getF
    // Arity 4
    // 'S' setF

  }
  
  ^ result
  // stdinScanner = bufio.NewScanner(os.Stdin)
]


