

// Bind package: "kotlin.reflect" content: [
//     @rename: "KClass"
//     type Class::T

//     @emit: "$0::class"
//     T class -> Class::T

//     Class::T cast::Any? -> T

//     Class::T isInstance::Any? -> Boolean

//     @emit: "$0::class"
//     constructor T class -> Class::T

//     @emit: "$0!!"
//     T? assertNotNull -> T
// ]

// errordomain Match = | Unmatched

// type MatchBlock = [I -> R!Unmatched]

// Class::C matchWith::[C -> R] -> MatchBlock = ^[ input::I ->
//     (.isInstance: input) ifTrue: [
//         matchWith C: (.cast: input)
//     ] ifFalse: [
//         Unmatched throwWithMessage: "No match"
//     ]
// ]

// T match::List::MatchBlock -> R = [
//     match forEach: [
//         result = it I: this |> ifError: [
//             continue
//         ]
//     ]
// ]



1..20, toList map: [it + 1], filter: [it % 2 == 1], echo
1..20 |> toList map: [it + 1] |> filter: [it % 2 == 1] |> echo

@Serializable
type Person name: String age: Int

person = Person name: "Alice" age: 35

str = Json encode: person
str echo // {"name":"Alice","age":35}

personFromStr = Json::Person decode: str
personFromStr echo // Person name: Alice age: 35